/*
 * This file is generated by jOOQ.
 */
package com.okeicalm.simpleJournalEntry.infra.db.tables


import com.okeicalm.simpleJournalEntry.infra.db.SimpleJournalEntryDb
import com.okeicalm.simpleJournalEntry.infra.db.indexes.BOOKS_FK_AUTHOR
import com.okeicalm.simpleJournalEntry.infra.db.keys.BOOKS_IBFK_1
import com.okeicalm.simpleJournalEntry.infra.db.keys.KEY_BOOKS_PRIMARY
import com.okeicalm.simpleJournalEntry.infra.db.tables.records.BooksRecord

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row4
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Books(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, BooksRecord>?,
    aliased: Table<BooksRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<BooksRecord>(
    alias,
    SimpleJournalEntryDb.SIMPLE_JOURNAL_ENTRY_DB,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>simple_journal_entry_db.books</code>
         */
        val BOOKS: Books = Books()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<BooksRecord> = BooksRecord::class.java

    /**
     * The column <code>simple_journal_entry_db.books.id</code>.
     */
    val ID: TableField<BooksRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>simple_journal_entry_db.books.name</code>.
     */
    val NAME: TableField<BooksRecord, String?> = createField(DSL.name("name"), SQLDataType.VARCHAR(20).nullable(false), this, "")

    /**
     * The column <code>simple_journal_entry_db.books.author_id</code>.
     */
    val AUTHOR_ID: TableField<BooksRecord, Long?> = createField(DSL.name("author_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>simple_journal_entry_db.books.description</code>.
     */
    val DESCRIPTION: TableField<BooksRecord, String?> = createField(DSL.name("description"), SQLDataType.VARCHAR(100), this, "")

    private constructor(alias: Name, aliased: Table<BooksRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<BooksRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>simple_journal_entry_db.books</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>simple_journal_entry_db.books</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>simple_journal_entry_db.books</code> table reference
     */
    constructor(): this(DSL.name("books"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, BooksRecord>): this(Internal.createPathAlias(child, key), child, key, BOOKS, null)
    override fun getSchema(): Schema? = if (aliased()) null else SimpleJournalEntryDb.SIMPLE_JOURNAL_ENTRY_DB
    override fun getIndexes(): List<Index> = listOf(BOOKS_FK_AUTHOR)
    override fun getIdentity(): Identity<BooksRecord, Long?> = super.getIdentity() as Identity<BooksRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<BooksRecord> = KEY_BOOKS_PRIMARY
    override fun getReferences(): List<ForeignKey<BooksRecord, *>> = listOf(BOOKS_IBFK_1)

    private lateinit var _authors: Authors
    fun authors(): Authors {
        if (!this::_authors.isInitialized)
            _authors = Authors(this, BOOKS_IBFK_1)

        return _authors;
    }
    override fun `as`(alias: String): Books = Books(DSL.name(alias), this)
    override fun `as`(alias: Name): Books = Books(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Books = Books(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Books = Books(name, null)

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row4<Long?, String?, Long?, String?> = super.fieldsRow() as Row4<Long?, String?, Long?, String?>
}
